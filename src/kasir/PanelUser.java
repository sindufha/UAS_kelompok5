/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package kasir;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import kasir.MenuUtama;
/**
 *
 * @author MyBook Hype AMD
 */
public class PanelUser extends javax.swing.JPanel {

    /**
     * Creates new form PanelUser
     */
    public PanelUser() {
        initComponents();
        loaddataUser();
        usertabel.getTableHeader().setFont(new Font("Segoe UI",Font.BOLD,16));
        usertabel.getTableHeader().setBackground(new Color(235,235,235));
        usertabel.setSelectionBackground(new Color(222,222,222));
        usertabel.setSelectionForeground(new Color(0,0,0));
        usertabel.setRowHeight(40);
        usertabel.getTableHeader().setPreferredSize(new Dimension(30,30));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelUser = new javax.swing.JPanel();
        bTambah = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tCari = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        usertabel = new javax.swing.JTable();
        bHapus = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(730, 646));

        panelUser.setBackground(new java.awt.Color(255, 255, 255));
        panelUser.setPreferredSize(new java.awt.Dimension(730, 646));
        panelUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelUserMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelUserMousePressed(evt);
            }
        });
        panelUser.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                panelUserVetoableChange(evt);
            }
        });

        bTambah.setBackground(new java.awt.Color(0, 204, 0));
        bTambah.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        bTambah.setForeground(new java.awt.Color(255, 255, 255));
        bTambah.setText("Tambah Data");
        bTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTambahActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("Search :");

        tCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tCariKeyReleased(evt);
            }
        });

        usertabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usertabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id kasir", "Username", "Nama", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(usertabel);
        if (usertabel.getColumnModel().getColumnCount() > 0) {
            usertabel.getColumnModel().getColumn(0).setMinWidth(0);
            usertabel.getColumnModel().getColumn(0).setPreferredWidth(0);
            usertabel.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        bHapus.setBackground(new java.awt.Color(255, 51, 51));
        bHapus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bHapus.setForeground(new java.awt.Color(255, 255, 255));
        bHapus.setText("Hapus");
        bHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHapusActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242), 2));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("User");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelUserLayout = new javax.swing.GroupLayout(panelUser);
        panelUser.setLayout(panelUserLayout);
        panelUserLayout.setHorizontalGroup(
            panelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelUserLayout.createSequentialGroup()
                .addGroup(panelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUserLayout.createSequentialGroup()
                        .addGap(759, 759, 759)
                        .addComponent(bHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelUserLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(panelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelUserLayout.createSequentialGroup()
                                .addComponent(bTambah)
                                .addGap(418, 418, 418)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tCari, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUserLayout.setVerticalGroup(
            panelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUserLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(panelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUserLayout.createSequentialGroup()
                        .addComponent(bTambah)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUserLayout.createSequentialGroup()
                        .addGroup(panelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tCari, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelUser, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
private void loaddataUser(){
    DefaultTableModel model = (DefaultTableModel) usertabel.getModel();
    model.setRowCount(0); // hapus semua data lama di tabel
    
    try {
        Connection con = koneksi.konek();
        String sql = "SELECT * FROM user";
        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery(sql);
        
        while (rs.next()) {
            String id_user = rs.getString("id_user");
            String username = rs.getString("username");
            String nama = rs.getString("nama");
            String role  = rs.getString("Role");
            model.addRow(new Object[]{id_user,username, nama,role});
        }

        rs.close();
        st.close();
        con.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mengambil data: " + e.getMessage());
    }
}
    private void bTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTambahActionPerformed
        // TODO add your handling code here:
     MenuUtama.content.removeAll();
     MenuUtama.content.revalidate();
     MenuUtama.content.add(new PanelUser2());
     MenuUtama.content.repaint();
    
    }//GEN-LAST:event_bTambahActionPerformed

    private void bHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHapusActionPerformed
        // TODO add your handling code here:
        int selectedRow = usertabel.getSelectedRow();
        if(selectedRow==-1){
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus.");
            return;
        
        
        }
        String id_kasir = usertabel.getValueAt(selectedRow,0 ).toString();
        int confirm = JOptionPane.showConfirmDialog(this, "Yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;
    
    try {
        
        // Cegah Hapus dari database
        Connection con = koneksi.konek();
        String countSql = "SELECT COUNT(*) as total FROM user";
        ResultSet rsCount = con.createStatement().executeQuery(countSql);
        if (rsCount.next() && rsCount.getInt("total") <= 1) {
            JOptionPane.showMessageDialog(this, "Minimal harus ada 1 user. Tidak bisa hapus.");
        return;
        }
        
       
        //Hapus Dari database
        String sql = "DELETE FROM user where id_user = ?";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, id_kasir);
        ps.executeUpdate();
        ps.close();
        con.close();
        
        DefaultTableModel model = (DefaultTableModel) usertabel.getModel();
        model.removeRow(selectedRow);

        usertabel.clearSelection();
        
        JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menghapus dari database: " + e.getMessage());
    }
    }//GEN-LAST:event_bHapusActionPerformed

    private void panelUserMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelUserMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_panelUserMousePressed

    private void panelUserVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_panelUserVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_panelUserVetoableChange

    private void panelUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelUserMouseClicked
        // TODO add your handling code here:
        usertabel.clearSelection();
    }//GEN-LAST:event_panelUserMouseClicked

    private void tCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tCariKeyReleased
        // TODO add your handling code here:
        TableRowSorter<TableModel> rowSorter;
        DefaultTableModel model = (DefaultTableModel) usertabel.getModel();
        rowSorter = new TableRowSorter<>(model);
        usertabel.setRowSorter(rowSorter);
        String text = tCari.getText();
    
    if (text.trim().length() == 0) {
        rowSorter.setRowFilter(null); // tampilkan semua data
    } else {
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text)); // filter, ignore case
    } 
    }//GEN-LAST:event_tCariKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bHapus;
    private javax.swing.JButton bTambah;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelUser;
    private javax.swing.JTextField tCari;
    public static javax.swing.JTable usertabel;
    // End of variables declaration//GEN-END:variables
}
